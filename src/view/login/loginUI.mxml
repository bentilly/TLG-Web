<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 
		 horizontalCenter="0"
		 verticalCenter="0"
		 
		 currentState="loginState"
		 alpha="0"
		 creationComplete="creationCompleteHandler(event)"
		 
		 >
	
	<fx:Script>
		<![CDATA[
			import com.adobe.crypto.MD5;
			import com.greensock.TweenLite;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.validators.Validator;
			
			import events.RequestEvent;
			import events.UIEvent;
			
			import view.tlgContent;
			public var controller:tlgContent;
			
			
			
			// HANDLERS -----------------
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				TweenLite.to(this, .3, {alpha:1});
				
			}
			
			// GO button
			protected function goButton_rollOverHandler(event:MouseEvent):void
			{
				goButton.setStyle("color", "#7be6ff");
				
			}
			
			protected function goButton_rollOutHandler(event:MouseEvent):void
			{
				goButton.setStyle("color", "#FFFFFF");
				
			}
			
			protected function goButton_clickHandler(event:MouseEvent):void
			{
				var validatorErrorArray:Array
				var isValidForm:Boolean
				var re:RequestEvent
				var requestObj:Object
				var uie:UIEvent;
				
				if(currentState == "loginState"){
					validatorErrorArray = Validator.validateAll([emailValidator, pwValidator]);
					isValidForm = validatorErrorArray.length == 0;
					if (isValidForm) {
						//turn on the spinner / block UI
						uie = new UIEvent(UIEvent.SPINNER_ON);
						dispatchEvent(uie);
						//make the request
						re = new RequestEvent(RequestEvent.TLG_API_REQUEST);
						requestObj = new Object();
						requestObj.operation = 'token.createToken';
						requestObj.email = emailInput.text;
						requestObj.password = MD5.hash(passwordInput.text);
						re.requestJson = JSON.stringify(requestObj);
						trace("\n\n>>--------API REQUEST--------- : request = "+requestObj.operation);
						trace(re.requestJson);
						dispatchEvent(re);
					}else {
						Alert.show("The form is not valid!", "Somethings up");
					}
				}else if(currentState == "forgotState"){
					validatorErrorArray = Validator.validateAll([emailValidator]);
					isValidForm = validatorErrorArray.length == 0;
					if (isValidForm) {
						//turn on the spinner / block UI
						uie = new UIEvent(UIEvent.SPINNER_ON);
						dispatchEvent(uie);
						//make the request
						re = new RequestEvent(RequestEvent.TLG_API_REQUEST);
						requestObj = new Object();
						requestObj.operation = 'user.resetPassword';
						requestObj.email = emailInput.text;
						re.requestJson = JSON.stringify(requestObj);
						trace("\n\n>>--------API REQUEST--------- : request = "+requestObj.operation);
						trace(re.requestJson);
						dispatchEvent(re);
					}else{
						Alert.show("The form is not valid!", "Somethings up");
					}
				}
				else if(currentState == "signupState"){
					validatorErrorArray = Validator.validateAll([emailValidator, pwValidator, confirmValidator]);
					isValidForm = validatorErrorArray.length == 0;
					if (isValidForm) {
						if(passwordInput.text == confirmInput.text){
							//turn on the spinner / block UI
							uie = new UIEvent(UIEvent.SPINNER_ON);
							dispatchEvent(uie);
							//make the request
							re = new RequestEvent(RequestEvent.TLG_API_REQUEST);
							requestObj = new Object();
							requestObj.operation = 'user.signup';
							requestObj.name = nameInput.text;
							requestObj.email = emailInput.text;
							requestObj.password = MD5.hash(passwordInput.text);
							re.requestJson = JSON.stringify(requestObj);
							trace("\n\n>>--------API REQUEST--------- : request = "+requestObj.operation);
							trace(re.requestJson);
							dispatchEvent(re);
						}else{
							Alert.show("Please make sure your passwords match", "Password");
						}
					}else{
						Alert.show("The form is not valid!", "Somethings up");
					}
				}
				
			}
			
			protected function enter_pressHandler(event:FlexEvent):void{
				goButton_clickHandler(new MouseEvent(MouseEvent.CLICK) );
			}
			
			
			public function userLoggedIn(event:UIEvent):void{
				TweenLite.delayedCall(40, clearFields, [], true); //wait for dash to reveal
				stage.focus = null;
			}
			public function loginFail(event:UIEvent):void{
				currentState = "loginState";
			}
			
			
//--------  MODE buttons
			protected function modeButton_rollOverHandler(event:MouseEvent):void{ event.target.setStyle("color", "#00a2ce");	}
			protected function modeButton_rollOutHandler(event:MouseEvent):void{ event.target.setStyle("color", "#333333");	}
			// LOG IN button
			protected function loginButton_clickHandler(event:MouseEvent):void{ 
				currentState ="loginState";
				clearValidators();
			}
			// FORGOT button
			protected function forgotButton_clickHandler(event:MouseEvent):void{ 
				currentState ="forgotState";
				clearValidators();
			}
			// SIGNUP button
			protected function signupButton_clickHandler(event:MouseEvent):void{ 
				currentState ="signupState";
				clearValidators();
			}
			protected function clearValidators():void{
				emailInput.errorString = '';
				passwordInput.errorString = '';
				try{
					confirmInput.errorString = '';
					nameInput.errorString = '';
				}catch(e:Error){
					
				}
			}
			
			
			
			
			private function clearFields():void{
				//emailInput.text = '';
				passwordInput.text = '';
				passwordInput.errorString = ''; //resets validation.
			}
			
			
			
			protected function batbHandler(event:MouseEvent):void
			{
				var re:RequestEvent = new RequestEvent(RequestEvent.TLG_API_REQUEST);
				var requestObj:Object = new Object();
				requestObj.operation = 'token.createToken';
				requestObj.email = "b@b.com";
				requestObj.password = MD5.hash("b");
				re.requestJson = JSON.stringify(requestObj);
				trace("\n\n>>--------API REQUEST--------- : request = "+requestObj.operation);
				trace(re.requestJson);
				dispatchEvent(re);
			}
			
			protected function btbHandler(event:MouseEvent):void
			{
				var re:RequestEvent = new RequestEvent(RequestEvent.TLG_API_REQUEST);
				var requestObj:Object = new Object();
				requestObj.operation = 'token.createToken';
				requestObj.email = "ben.tilly@gmail.com";
				requestObj.password = MD5.hash("bt");
				re.requestJson = JSON.stringify(requestObj);
				trace("\n\n>>--------API REQUEST--------- : request = "+requestObj.operation);
				trace(re.requestJson);
				dispatchEvent(re);
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<mx:EmailValidator id="emailValidator" source="{emailInput}" property="text" required="true"/>
		<mx:StringValidator id="pwValidator" source="{passwordInput}" property="text" required="true"/>
		<mx:StringValidator id="confirmValidator" source="{confirmInput}" property="text" required="true"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="loginState"/>
		<s:State name="forgotState"/>
		<s:State name="signupState"/>
	</s:states>
	
	
	<s:VGroup gap="0">
		<s:Group>
			<s:Label fontFamily="OS-condBold" color="white" fontSize="30" paddingBottom="-6" paddingLeft="5"
					 text.loginState="LOGIN" text.forgotState="FORGOT" text.signupState="SIGNUP"
					 />
		</s:Group>
		<s:BorderContainer backgroundColor="white" borderVisible="false" cornerRadius="4">
			<s:VGroup paddingBottom="20" paddingLeft="20" paddingRight="20" paddingTop="18">
				<s:Label text="name:" styleName="smallLight" includeIn="signupState"/>
				<s:TextInput id="nameInput" styleName="textFieldBold" width="300" includeIn="signupState"/>
				<s:Label text="email:" styleName="smallLight"/>
				<s:TextInput id="emailInput" styleName="textFieldBold" width="300"/>
				<s:Label text="password:" styleName="smallLight" excludeFrom="forgotState" paddingTop="8"/>
				<s:TextInput id="passwordInput" styleName="textFieldBold" displayAsPassword="true" width="300" excludeFrom="forgotState" enter.loginState="enter_pressHandler(event)"/>
				<s:Label text="password confirm:" styleName="smallLight" paddingTop="8" includeIn="signupState"/>
				<s:TextInput id="confirmInput" styleName="textFieldBold" displayAsPassword="true" width="300" includeIn="signupState"/>
				<s:HGroup gap="15">
					<s:Label id="loginButton" text="Log in" styleName="smallLight" paddingTop="15"
							 useHandCursor="true" buttonMode="true"
							 rollOver="modeButton_rollOverHandler(event)"
							 rollOut="modeButton_rollOutHandler(event)"
							 click="loginButton_clickHandler(event)"
							 excludeFrom="loginState"
							 />
					<s:Label id="forgotButton" text="Forgot" styleName="smallLight" paddingTop="15"
							 useHandCursor="true" buttonMode="true"
							 rollOver="modeButton_rollOverHandler(event)"
							 rollOut="modeButton_rollOutHandler(event)"
							 click="forgotButton_clickHandler(event)"
							 excludeFrom="forgotState"
							 />
					<s:Label id="signupButton" text="Signup" styleName="smallLight" paddingTop="15"
							 useHandCursor="true" buttonMode="true"
							 rollOver="modeButton_rollOverHandler(event)"
							 rollOut="modeButton_rollOutHandler(event)"
							 click="signupButton_clickHandler(event)"
							 excludeFrom="signupState"
							 />
				</s:HGroup>
			</s:VGroup>
		</s:BorderContainer>
		<s:Group width="100%">
			<s:Group right="0">
				<s:Label id="goButton" fontFamily="OS-condBold" color="white" fontSize="30" text="GO"
						 useHandCursor="true" buttonMode="true"
						 rollOver="goButton_rollOverHandler(event)"
						 rollOut="goButton_rollOutHandler(event)"
						 click="goButton_clickHandler(event)"
						 />
				</s:Group>
			
		</s:Group>
		<!--<s:Label text="go b@b" click="batbHandler(event)" />-->
		<!--<s:Label text="go bt" click="btbHandler(event)" />-->
	</s:VGroup>
	
</s:Group>
