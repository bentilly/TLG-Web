<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:widgets="view.widgets.*"
		 
		 height="300" xmlns:fxg="assets.fxg.*"
		 
		 >
	
	
	<fx:Script>
		<![CDATA[
			import com.adobe.crypto.MD5;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			import business.dataObjects.Activity;
			import business.dataObjects.Workout;
			
			import events.UIEvent;
			
			/*** Passed in ***/
			[Bindable] public var activities_collection:ArrayCollection;
			[Bindable] public var editable:Boolean = false;
			[Bindable] public var groupName:String;
			
			
			/*** IMPORTED ***/
			[Bindable] public var userEmail:String;
			
			//Flags
			public var editWorkoutMode:Boolean = false; //activityGroup used by addBar and editWorkoutPopup. Need to use appropriate activityTag UI Element.
			
			public function getActivity():String{
				if(activitiesList.selectedIndex > -1){
					return activitiesList.selectedItem._key;
				}
				return null;
			}
			
			public function getNewActivity():String{
				if(newActivityInput.text == 'new activity' || newActivityInput.text == ''){
					return null
				}else{
					return newActivityInput.text;
				}
			}
			
			
			
			public function selectActivity(activity:Activity):void{
				var count:int = 0;
				for each(var a:Activity in activities_collection){
					if(a == activity){
						activitiesList.selectedIndex = count;
						break;
					}
					count++;
				}
			}

			protected function activitiesList_changeHandler(event:IndexChangeEvent):void
			{
				if(activitiesList.selectedIndex > -1){
					newActivityInput.text = "new activity";
					newActivityInput.styleName = "textFieldNewActivityBlank";
				}
			}
			
			protected function newActivityInput_focusInHandler(event:FocusEvent):void
			{
				activitiesList.selectedIndex = -1;
				if(newActivityInput.text == "new activity"){
					newActivityInput.text = "";
					newActivityInput.styleName = "textFieldNewActivityContent";
				}
			}
			
			protected function newActivityInput_focusOutHandler(event:FocusEvent):void
			{
				if(newActivityInput.text == ""){
					newActivityInput.text = "new activity";
					newActivityInput.styleName = "textFieldNewActivityBlank";
				}
			}
			
			
			
			/*triggered on successful creation of the workout in DB*/
			public function workoutAdded(event:UIEvent):void{
				newActivityInput.text = "new activity";
				newActivityInput.styleName = "textFieldNewActivityBlank";
			}
			
			
			public function selectActivities(w:Workout):void{
				for each(var wa:Activity in w._activities_collection){
					var count:int = 0;
					for each(var la:Activity in activities_collection){
						if(wa == la){
							activitiesList.selectedIndex = count;
							break;
						}
						count++;
					}
				}
			}
			
			
			
			public function setMyActivities():void
			{
				gravatarImage.source = 'http://www.gravatar.com/avatar/' + MD5.hash(userEmail).toString() + '?s=50';
				gravatarImage.validateNow();
				gravatarImage.visible = true;
				groupHeader.removeElementAt(0);
			}
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	
	
	<s:VGroup paddingLeft="15">
		<s:HGroup id="groupHeader">
			<fxg:gibbon id="gibbonIcon" width="50" height="50"/>
			<s:Image id="gravatarImage" visible="false"/>
			<s:Label text="{groupName}" styleName="h2_white" width="150" height="50" paddingTop="6" lineHeight="100%"/>
		</s:HGroup>
		
		<s:List id="activitiesList" dataProvider="{activities_collection}" itemRenderer="view.skinsAndRenderers.editWorkout_activityRenderer"
				borderVisible="false" contentBackgroundAlpha="0" change="activitiesList_changeHandler(event)"
				>
			<s:layout>
				<s:VerticalLayout useVirtualLayout="false" requestedMinRowCount="1" gap="0"/>
			</s:layout>
		</s:List>
		
		<s:TextInput id="newActivityInput" styleName="textFieldNewActivityBlank" width="200" text="new activity" 
					 focusIn="newActivityInput_focusInHandler(event)" focusOut="newActivityInput_focusOutHandler(event)" visible="{editable}"/>
		
	</s:VGroup>
	
	
</s:Group>
