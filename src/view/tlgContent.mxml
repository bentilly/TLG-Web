<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:login="view.login.*"
		 xmlns:addBar="view.addBar.*" 
		 xmlns:dashboard="view.dashboard.*"
		 
		 creationComplete="creationCompleteHandler(event)"
		 resize="resizeHandler(event)" xmlns:myWorkouts="view.myWorkouts.*"
		 addedToStage="addedToStageHandler(event)"
		 
		 >
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.greensock.TweenMax;
			import com.greensock.easing.Bounce;
			
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import events.RequestEvent;
			import events.UIEvent;
			
			import view.addBar.addBar;
			import view.dashboard.myGroups_dash;
			import view.dashboard.myTraining_dash;
			import view.login.loginUI;
			
			/*** INTERNAL ***/
			private var myTrainingSize:Number;
			
			/* UI Elements */
			private var loginWidget:loginUI;
			private var topAddBar:addBar;
			private var myTrainingDash: myTraining_dash;
			private var myGroupsDash:myGroups_dash;
			
			
			/*** IMPORTED ***/
			[Bindable] public var token:String;
			[Bindable] public var myGroups:Array;
			
			
			/*** OUTSIDE EVENTS ***/
			public function userLoggedIn(event:UIEvent):void{
				//TODO: show spinner
				
				//need to know GROUPS before building UI
				var re:RequestEvent = new RequestEvent(RequestEvent.TLG_API_REQUEST);
				var requestObj:Object = new Object();
				requestObj.operation = 'user.getGroups';
				requestObj.token = token;
				re.requestJson = JSON.stringify(requestObj);
				trace("\n\n>>--------API REQUEST--------- : request = "+requestObj.operation);
				trace(re.requestJson);
				dispatchEvent(re);

			}
			public function gotGroups(event:UIEvent):void{
				switch(myGroups.length){
					case 0:
						myTrainingSize = 66;
						trace("0 groups");
						break;
					case 1:
						myTrainingSize = 50;
						trace("1 group");
						break
					default:
						myTrainingSize = 33;
						trace("1+ groups");
						break;
				}
				removeLogin();
			}
			
			
			/*** INTERNAL ***/
			//core
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				loginWidget = new loginUI();
				loginWidget.alpha = 0;
				this.addElement(loginWidget);
			}
			protected function resizeHandler(event:ResizeEvent):void
			{
				sizeDashGroup();
			}
			protected function addedToStageHandler(event:Event):void
			{
				sizeDashGroup();
			}
			private function sizeDashGroup():void{
				try{
					dashGroup.width = this.width;
					dashGroup.height = this.height;
				}catch(e:Error){
					trace('nothing on stage yet');
				}
			}
			
			//login
			private function removeLogin():void{
				TweenLite.to(loginWidget, .5, {alpha:0, onComplete:killLoginWidget});
			}
			private function killLoginWidget():void{
				this.removeElement(loginWidget);
				
				//go straight to personal training page (no groups)
				/*addMyTraining();*/
				/*addMyGroups();
				addTopAddBar();*/
				
				preloadData();
			}
			
			//topAddBar
			private function addTopAddBar():void{
				topAddBar = new addBar();
				topAddBar.y = -100;
				topAddBar.depth = 100; ///put it on top
				this.addElement(topAddBar);
				TweenLite.to(topAddBar, 1.5, {y:0, ease:Bounce.easeOut, delay:.8});
			}
			
			//myTraining
			private function addMyTraining():void{
				myTrainingDash = new myTraining_dash();
				myTrainingDash.id = 'myTrainingDash';
				myTrainingDash.mouseChildren = false;
				myTrainingDash.percentWidth = myTrainingSize;
				myTrainingDash.alpha = 0;
				myTrainingDash.addEventListener(MouseEvent.CLICK, clickMyTrainingDash_handler);
				dashGroup.addElement(myTrainingDash);
				TweenLite.to(myTrainingDash, 1, {alpha:1});
			}
			
			
			private function clickMyTrainingDash_handler(event:MouseEvent):void{
				TweenLite.to(dashGroup, .5, {alpha:0, x:-600, onComplete:killDash});
				myWorkouts.visible = true;
				myWorkouts.alpha = 0;
				myWorkouts..x = 600;
				TweenLite.to(myWorkouts, .5, {alpha:1, x:0});
				
				tweenBGColour(0xffffff);
				
				var uie:UIEvent = new UIEvent(UIEvent.GO_MYWORKOUTS);
				dispatchEvent(uie);
				
				
			}
			private function tweenBGColour(targetColor:Number):void{
				var currentBGColour:Number = bgCol.getStyle('backgroundColor');
				
				
				var myStyle:Object = {backgroundColor:currentBGColour};
				TweenMax.to(myStyle, 1, {hexColors:{backgroundColor:targetColor}, onUpdate:updateStyle});
				function updateStyle():void {
					bgCol.setStyle("backgroundColor", myStyle.backgroundColor);
				}
			}
			
			private function killDash():void{
				dashGroup.x = 0;
				dashGroup.visible = false;
			}
			//myGroups
			private function addMyGroups():void{
				myGroupsDash = new myGroups_dash();
				myGroupsDash.percentWidth = 100 - myTrainingSize;
				myGroupsDash.alpha = 0;
				myGroupsDash.myTrainingSize = myTrainingSize;
				dashGroup.addElement(myGroupsDash);
				TweenLite.to(myGroupsDash, 1, {alpha:1, onComplete:preloadData});
				
				
			}
			
			//Preload data. Once UI is built go get activities and other data
			private function preloadData():void{
				//myActivities
				var re:RequestEvent = new RequestEvent(RequestEvent.TLG_API_REQUEST);
				var requestObj:Object = new Object();
				requestObj.operation = 'user.getActivities';
				requestObj.token = token;
				re.requestJson = JSON.stringify(requestObj);
				trace("\n\n>>--------API REQUEST--------- : request = "+requestObj.operation);
				trace(re.requestJson);
				dispatchEvent(re);
			}
			
			//bypass dashboard - go straight to my training
			public function gotAllWorkouts(event:UIEvent):void{
				addTopAddBar();
				TweenLite.delayedCall(2.5, clickMyTrainingDash_handler, [new MouseEvent(MouseEvent.CLICK)]);
			}
			
			public function goHome(event:UIEvent):void{
				dashGroup.x = -600;
				dashGroup.alpha = 0;
				dashGroup.visible = true;
				sizeDashGroup();
				TweenLite.to(dashGroup, .5, {alpha:1, x:0});
				TweenLite.to(myWorkouts, .5, {alpha:0, x:600, onComplete:killMyWorkouts});
				tweenBGColour(0x26bc3b);
			}
			private function killMyWorkouts():void{
				myWorkouts.x = 0;
				myWorkouts.visible = false;
			}
			public function logout(event:Event):void{
				TweenLite.to(myWorkouts, .5, {alpha:0, x:600, onComplete:killMyWorkouts});
				tweenBGColour(0x26bc3b);
				TweenLite.to(topAddBar, .5, {y:-100, onComplete:killTopBar});
				
				loginWidget = new loginUI();
				loginWidget.alpha = 0;
				this.addElement(loginWidget);
				
				TweenLite.to(loginWidget, 1, {alpha:1});
				
			}
			private function killTopBar():void{
				this.removeElement(topAddBar);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:BorderContainer id="bgCol" backgroundColor="#26bc3b" width="100%" height="100%" borderVisible="false"/>
	
	<myWorkouts:myWorkoutsContent id="myWorkouts" visible="false"/>
	
	<s:HGroup id="dashGroup" gap="0"/>
	
	
	
	
</s:Group>
