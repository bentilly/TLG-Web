<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:login="view.login.*"
		 xmlns:addBar="view.addBar.*" 
		 xmlns:dashboard="view.dashboard.*"
		 xmlns:myWorkouts="view.myWorkouts.*"
		 
		 creationComplete="creationCompleteHandler(event)"
		 resize="resizeHandler(event)"
		 addedToStage="addedToStageHandler(event)" xmlns:myGroups="view.myGroups.*"
		 
		 
		 width="100%"
		 height="100%"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.greensock.easing.Bounce;
			import com.greensock.easing.Cubic;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import events.RequestEvent;
			import events.UIEvent;
			
			import view.addBar.addBar;
			import view.dashboard.myGroups_dash;
			import view.dashboard.myTraining_dash;
			import view.login.loginUI;
			
			/*** INTERNAL ***/
			private var myTrainingSize:Number;
			
			//Flags
			private var uiState:int = 0; //0 = login, 1 = dashboard, 2 = Workouts, 3 = Groups
			
			/* UI Elements */
			/*private var loginWidget:loginUI;*/
			private var topAddBar:addBar;
			private var myTrainingDash: myTraining_dash;
			private var myGroupsDash:myGroups_dash;
			
			
			/*** IMPORTED ***/
			[Bindable] public var token:String;
			[Bindable] public var myGroups_collection:ArrayCollection;
			
			
			//core
			protected function creationCompleteHandler(event:FlexEvent):void
			{

			}
			protected function resizeHandler(event:ResizeEvent):void
			{
				trace('resizeHandler');
				sizeDashGroup();
			}
			protected function addedToStageHandler(event:Event):void
			{
				trace('addedToStageHandler');
				sizeDashGroup();
			}
			
			
			//login
			public function userLoggedIn(event:UIEvent):void{
				//TODO: show spinner
				
				//need to know GROUPS before building UI
				var re:RequestEvent = new RequestEvent(RequestEvent.TLG_API_REQUEST);
				var requestObj:Object = new Object();
				requestObj.operation = 'user.getAllMyGroups';
				requestObj.token = token;
				re.requestJson = JSON.stringify(requestObj);
				trace("\n\n>>--------API REQUEST--------- : request = "+requestObj.operation);
				trace(re.requestJson);
				dispatchEvent(re);
				
			}
			public function gotGroups(event:UIEvent):void{
				switch(myGroups_collection.length){
					case 0:
						myTrainingSize = 0.6666;
						trace("0 groups");
						break;
					case 1:
						myTrainingSize = 0.5;
						trace("1 group");
						break
					default:
						myTrainingSize = 0.3333;
						trace("1+ groups");
						break;
				}
				preloadData();
			}
			private function preloadData():void{
				//myActivities
				var re:RequestEvent = new RequestEvent(RequestEvent.TLG_API_REQUEST);
				var requestObj:Object = new Object();
				requestObj.operation = 'user.getActivities';
				requestObj.token = token;
				re.requestJson = JSON.stringify(requestObj);
				trace("\n\n>>--------API REQUEST--------- : request = "+requestObj.operation);
				trace(re.requestJson);
				dispatchEvent(re);
			}
			
			public function gotAllWorkouts(event:UIEvent):void{
				addTopAddBar();
				addMyTraining();
				addMyGroups();
			}
			
			//topAddBar
			private function addTopAddBar():void{
				topAddBar = new addBar();
				topAddBar.y = -100;
				topAddBar.depth = 100; ///put it on top
				this.addElement(topAddBar);
				TweenLite.to(topAddBar, 45, {y:0, ease:Bounce.easeOut, useFrames:true});
			}
			
			//myTraining
			private function addMyTraining():void{
				myTrainingDash = new myTraining_dash();
				myTrainingDash.id = 'myTrainingDash';
				myTrainingDash.mouseChildren = false;
				myTrainingDash.addEventListener(MouseEvent.CLICK, clickMyTrainingDash_handler);
				dashGroup.addElement(myTrainingDash);
				
				//tell My Workouts to build first view. Not visible yet
				var uie:UIEvent = new UIEvent(UIEvent.BUILD_MYWORKOUTS);
				dispatchEvent(uie);
			}
			//myGroups
			private function addMyGroups():void{
				myGroupsDash = new myGroups_dash();
				myGroupsDash.myTrainingSize = myTrainingSize;
				dashGroup.addElement(myGroupsDash);
				trace('addMyGroups()');
				sizeDashGroup();
				setDashStart();
			}
			private function setDashStart():void{
				myTrainingDash.x = (myTrainingDash.width * -1) - 15;
				myGroupsDash.right = (myGroupsDash.width * -1) - 15;
				TweenLite.delayedCall(2.5, revealDash);
			}
			
			
			private function killDash():void{
				dashGroup.x = 0;
				dashGroup.visible = false;
			}
			
			public function goHome(event:UIEvent):void{
				revealDash();
			}
			private function killMyWorkouts():void{
				myWorkouts.x = 0;
				myWorkouts.visible = false;
			}
			
			
			//logout
			public function logout(event:Event):void{
				if(uiState == 1){
					TweenLite.to(topAddBar, .5, {y:-100, onComplete:killTopBar});
					myWorkouts.visible = false;
					myGroup.visible = false;
					hideDash();
					uiState = 0;
					loginWidget.currentState = "loginState"
				}else{
					revealDash();
					TweenLite.delayedCall(16, logout, [null], true);
				}
				
			}
			private function killTopBar():void{
				this.removeElement(topAddBar);
			}
			
			
			//control Dashboard UI
			private function sizeDashGroup():void{
				try{				
					myTrainingDash.width = (stage.stageWidth * myTrainingSize) + 1; //one pixel gap sometimes because of rounding widths
					myGroupsDash.width = stage.stageWidth - myTrainingDash.width;
					myGroupsDash.groupScroller.width = stage.stageWidth - myTrainingDash.width;
					
					
					myTrainingDash.dashLabel.setStyle('paddingTop', stage.stageHeight/4);
					myGroupsDash.dashLabel.setStyle('paddingTop', stage.stageHeight/4);
					
					if(uiState != 1){ //curtains open
						myTrainingDash.x = (myTrainingDash.width * -1) - 15;
						myGroupsDash.right = (myGroupsDash.width * -1) - 15;
					}
					
					
					trace('sized');
					
				}catch(e:Error){
					trace('nothing on stage yet');
				}
			}
			private function revealDash():void{
				uiState = 1;
				TweenLite.to(myTrainingDash, 15, {x:0, useFrames:true});
				TweenLite.to(myGroupsDash, 15, {right:0, useFrames:true});
				
			}
			private function hideDash():void{
				var myTrainingDashTarget:Number = (myTrainingDash.width * -1) - 15;
				var myGroupsDashTarget:Number = (myGroupsDash.width * -1) - 15;
				TweenLite.to(myTrainingDash, 0.6, {x:myTrainingDashTarget, ease:Cubic.easeIn});
				TweenLite.to(myGroupsDash, 0.6, {right:myGroupsDashTarget, ease:Cubic.easeIn});
				
			}
			
			
//Go to a group
			public function goGroup(event:UIEvent):void{
				//assumes you are on the dashboard
				myWorkouts.visible = false;
				myGroup.visible = true;
				
				myGroup.setLeaderboard();
				
				uiState = 3;
				hideDash();
			}
			
			/** Event handlers **/
			private function clickMyTrainingDash_handler(event:MouseEvent):void{
				myWorkouts.visible = true;
				myGroup.visible = false;
				hideDash();
				uiState = 2;
				var uie:UIEvent = new UIEvent(UIEvent.GO_MYWORKOUTS);
				dispatchEvent(uie);
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:GlowFilter color="#000000" id="outerShadowFilter" blurX="30" blurY="30" alpha=".1"/>
	</fx:Declarations>
	
	<s:BorderContainer id="bgCol" backgroundColor="#26bc3b" width="100%" height="100%" borderVisible="false"/>
	
	<login:loginUI id="loginWidget"/>
	
	<myWorkouts:myWorkoutsContent id="myWorkouts" visible="false"/>
	<myGroups:myGroupContent id="myGroup" visible="false"/>
	
	<s:Group id="dashGroup" width="100%" height="100%" filters="{outerShadowFilter}" clipAndEnableScrolling="true"/>
	
	<s:Label id="iteration" text="12" styleName="tinyWhite" left="3" bottom="3" alpha=".4"/>
	
	
</s:Group>
