<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:myWorkouts="view.myWorkouts.*"
		 
		 width="100%" 
		 height="100%" 
		 
		 resize="resizeHandler(event)"
		 creationComplete="creationCompleteHandler(event)"
		 >
	
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IViewCursor;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import business.utils;
			import business.dataObjects.raw.WorkoutMonth2;
			
			import events.UIEvent;
			
			/*** IMPORTED ***/
			[Bindable] public var token:String;
			[Bindable] public var workoutDay_collection:ArrayCollection; //workouts by day : used for list
			[Bindable] public var workoutMonth_collection:ArrayCollection; //workout days by month : used for calendar
			
			
			
			private var monthWidth:Number;
			private var edgeMonthWidth:Number = 160;
			private var calMonthsArray:Array;
			private var calBuilt:Boolean = false;
			private var selectedMonth:Date;
			
			
			private var utils:business.utils = new business.utils();
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				var now:Date = new Date();
				selectedMonth = new Date(now.fullYear, now.month);
			}

			public function logout(event:UIEvent):void{
				TweenLite.delayedCall(18, clearCalendar, [], true); //delay while dash closes
			}
			private function clearCalendar():void{
				calBuilt = false;
				calendarContent.removeAllElements();
			}
			
			
			public function buildMyWorkouts(event:Event):void{
				goMyWorkouts(new UIEvent(UIEvent.GO_MYWORKOUTS));
			}
			
			private function getMonthData(d:Date):WorkoutMonth2{
				for each(var wm:WorkoutMonth2 in workoutMonth_collection){
					if(d.time == wm._date.time){
						return wm;
					}
				}
				return null;
			}
			
			public function goMyWorkouts(event:UIEvent):void
			{
				if(!calBuilt){
					var now:Date = new Date();
					calMonthsArray = new Array();
					for(var i:int = 0; i < 5; i++){
						var cm:calendarChartMonth = new calendarChartMonth();
						cm.myMonth = new Date(selectedMonth.fullYear, selectedMonth.month + (i-2));
						cm.myMonthData = getMonthData(cm.myMonth);
						cm.buildMonth();
						cm.alpha = .3;
						cm.monthLabel.scaleX = cm.monthLabel.scaleY = .7;
						cm.monthLabel.y = 7;
						calendarContent.addElement(cm);
						calMonthsArray.push(cm);
						
						if(i==2){
							cm.alpha = 1;
							cm.monthLabel.scaleX = cm.monthLabel.scaleY = 1;
							cm.monthLabel.y = 0;
						}
						if(i<2){
							cm.monthLabel.x = monthWidth - edgeMonthWidth + 20;
						}

					}
					addMonthEventListeners();
					resizeMonths();
					calBuilt = true;
				}
				
				
				/* -------- LIST --------*/
				
				//clear list
				//workoutsListComponent.dataProvider = null;
				//Find this WorkoutMonth and set as dataprovider
				/*for each(var month:WorkoutMonth in workoutDaysByMonth_collection){
					if( utils.compareMonths(month._date, selectedMonth) ){
						workoutsListComponent.dataProvider = month._workoutDays_collection;
						break;
					}
				}*/
			}
			
			/*public function workoutAdded(event:UIEvent):void{
				//If this month has no workouts, the list will have no dataprovider. On workoutAdded see if there now is data for this month
				if(!workoutsListComponent.dataProvider){
					for each(var month:WorkoutMonth in workoutDaysByMonth_collection){
						if( utils.compareMonths(month._date, selectedMonth) ){
							workoutsListComponent.dataProvider = month._workoutDays_collection;
							break;
						}
					}
				}
			}*/
			
			
			
			
			
			protected function resizeHandler(event:ResizeEvent):void
			{
				try{resizeMonths();}catch(e:Error){};
			}
			
			private function resizeMonths():void{
				monthWidth = this.width - (2 * edgeMonthWidth);
				for(var i:int = 0; i < 5; i++){
					var cm:calendarChartMonth = calMonthsArray[i];
					cm.width = monthWidth;
					cm.x = ((monthWidth * -2) + (i*monthWidth)) + edgeMonthWidth;
					
					if(i<2){
						cm.monthLabel.x = cm.width - edgeMonthWidth + 20;
					}
					
				}
			}
			
	//Event handlers ::::::::::
			
			private function goPrevMonth(event:MouseEvent):void{
				removeMonthEventListeners();
				
				//remove 5 from stage and array
				var cm:calendarChartMonth = calMonthsArray.pop();
				calendarContent.removeElement(cm);
				
				//move 0 - 3 to the right
				var i:int = 0;
				monthWidth = this.width - (2 * edgeMonthWidth);
				for each(var m:calendarChartMonth in calMonthsArray){
					var nowX:Number = m.x;
					if(i==1){ //activate
						TweenLite.to(m, 1, {x:nowX+monthWidth, alpha:1});
						TweenLite.to(m.monthLabel, 1, {scaleX:1, scaleY:1, x:0, y:0});
					}else if(i==2){ //deactivate
						TweenLite.to(m, 1, {x:nowX+monthWidth, alpha:.3});
						TweenLite.to(m.monthLabel, 1, {scaleX:.7, scaleY:.7, y:7});
					}else{
						TweenLite.to(m, 1, {x:nowX+monthWidth});
					}
					
					i++;
				}
				TweenLite.delayedCall(1, finishGoPrevMonth);
				
			}
			private function finishGoPrevMonth():void{
				//add new month to 0 position (stage and arrary) TODO: do this after tweening? Maybe do it before
				var newMonth:calendarChartMonth = new calendarChartMonth();
				newMonth.width = monthWidth;
				newMonth.x = (monthWidth * -2) + edgeMonthWidth;
				newMonth.alpha = .3;
				newMonth.monthLabel.scaleX = newMonth.monthLabel.scaleY = .7;
				newMonth.monthLabel.y = 7;
				newMonth.monthLabel.x = monthWidth - edgeMonthWidth + 20;
				//set selected month and title
				selectedMonth = calMonthsArray[2].myMonth; //<<<< is not actual month (wtf?)
				newMonth.myMonth = new Date(selectedMonth.fullYear, selectedMonth.month-3);
				//pass in workouts
				//newMonth.myMonthData = getMonthData(newMonth.myMonth);
				//build and add
				newMonth.buildMonth();
				calMonthsArray.unshift(newMonth);
				calendarContent.addElement(newMonth);
				//add event listeners
				TweenLite.delayedCall(.1, addMonthEventListeners);
				
				
			/* -------- LIST --------*/
				
				//clear list
				/*workoutsListComponent.dataProvider = null;
				//Find this WorkoutMonth and set as dataprovider
				var cm:calendarChartMonth = calMonthsArray[2] as calendarChartMonth;
				for each(var month:WorkoutMonth in workoutDaysByMonth_collection){
					if( utils.compareMonths(month._date, cm.myMonth) ){
						workoutsListComponent.dataProvider = month._workoutDays_collection;
						break;
					}
				}*/
				
				//broadcast current month
				var uie:UIEvent = new UIEvent(UIEvent.SET_WORKOUT_MONTH);
				uie.date = new Date(selectedMonth.fullYear, selectedMonth.month-1);
				dispatchEvent(uie);
				
			}
			
			
			
			private function goNextMonth(event:MouseEvent):void{
				removeMonthEventListeners();
				
				//remove 0 from stage and array
				var cm:calendarChartMonth = calMonthsArray.shift();
				calendarContent.removeElement(cm);
				
				//move 1 - 4 to the right
				var i:int = 0;
				monthWidth = this.width - (2 * edgeMonthWidth);
				for each(var m:calendarChartMonth in calMonthsArray){
					var nowX:Number = m.x;
					
					if(i==1){ //deactivate
						TweenLite.to(m, 1, {x:nowX-monthWidth, alpha:.3});
						var targetX:Number = m.width - edgeMonthWidth + 20;
						TweenLite.to(m.monthLabel, 1, {scaleX:.7, scaleY:.7, x:targetX, y:7});
					}else if(i==2){ //activate
						TweenLite.to(m, 1, {x:nowX-monthWidth, alpha:1});
						TweenLite.to(m.monthLabel, 1, {scaleX:1, scaleY:1, y:0});
					}else{
						TweenLite.to(m, 1, {x:nowX-monthWidth});
					}
					
					
					i++;
				}
				TweenLite.delayedCall(1, finishGoNextMonth);
				
			}
			private function finishGoNextMonth():void{
				//add new month to 5 position (stage and arrary) TODO: do this after tweening? Before?
				var newMonth:calendarChartMonth = new calendarChartMonth();
				newMonth.width = monthWidth;
				newMonth.x = (monthWidth * 2) + edgeMonthWidth;
				newMonth.alpha = .3;
				newMonth.monthLabel.scaleX = newMonth.monthLabel.scaleY = .7;
				newMonth.monthLabel.y = 7;
				//set selected month and title
				selectedMonth = calMonthsArray[2].myMonth; //<<<
				newMonth.myMonth = new Date(selectedMonth.fullYear, selectedMonth.month+2);
				//pass in workouts
				//newMonth.myMonthData = getMonthData(newMonth.myMonth);
				//build and add
				newMonth.buildMonth();
				calMonthsArray.push(newMonth);
				calendarContent.addElement(newMonth);

				//add event listeners
				TweenLite.delayedCall(.1, addMonthEventListeners);
				
				
				/* -------- LIST --------*/
				
				//clear list
				//workoutsListComponent.dataProvider = null;
				//Find this WorkoutMonth and set as dataprovider
				var cm:calendarChartMonth = calMonthsArray[2] as calendarChartMonth;
				/*for each(var month:WorkoutMonth in workoutDaysByMonth_collection){
					if( utils.compareMonths(month._date, cm.myMonth) ){
						workoutsListComponent.dataProvider = month._workoutDays_collection;
						break;
					}
				}*/
				
				
				//broadcast current month
				var uie:UIEvent = new UIEvent(UIEvent.SET_WORKOUT_MONTH);
				uie.date = selectedMonth;
				dispatchEvent(uie);
				
			}
			
			
			
			
			private function addMonthEventListeners():void{
				calMonthsArray[1].addEventListener(MouseEvent.CLICK, goPrevMonth);
				calMonthsArray[3].addEventListener(MouseEvent.CLICK, goNextMonth);
				//mousechildren
				calMonthsArray[1].mouseChildren = false;
				calMonthsArray[2].mouseChildren = true;
				calMonthsArray[3].mouseChildren = false;
			}
			private function removeMonthEventListeners():void{
				calMonthsArray[1].removeEventListener(MouseEvent.CLICK, goPrevMonth);
				calMonthsArray[3].removeEventListener(MouseEvent.CLICK, goNextMonth);
			}
			
			
			
			
		]]>
	</fx:Script>
	
	
	
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<!--Background-->
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="#ffffff"/>
		</s:fill>
	</s:Rect>
	
	
	<s:VGroup width="100%" height="100%" gap="0">
		<s:Group width="100%" height="280">
			<s:BorderContainer backgroundColor="#D6E8EA" width="100%" height="100%" borderVisible="false">
				<s:Group id="calendarContent" y="45" width="100%"/>
			</s:BorderContainer>
		</s:Group>
		<s:Group width="100%" height="100%">
			<s:HGroup width="100%" height="100%">
				<!--Stats and activities go here
				<s:BorderContainer height="100%" width="400"/>
				-->
				<s:Scroller horizontalScrollPolicy="off" width="100%" height="100%">
					<s:DataGroup id="workoutsList" width="100%" height="100%" itemRenderer="view.skinsAndRenderers.workoutList_dayRenderer" dataProvider="{workoutDay_collection}">
						<s:layout>
							<s:VerticalLayout/>
						</s:layout>
					</s:DataGroup>
				</s:Scroller>
				
			</s:HGroup>
		</s:Group>
	</s:VGroup>
	
</s:Group>
