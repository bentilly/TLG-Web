<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:myWorkouts="view.myWorkouts.*"
		 
		 width="100%" 
		 height="100%" 
		 gap="25"
		 
		 paddingBottom="30"
		 paddingLeft="30"
		 paddingRight="30"
		 paddingTop="30"
		 
		 >
	
	<fx:Script>
		<![CDATA[
			import business.utils;
			import business.dataObjects.Workout;
			
			import events.UIEvent;
			
			public var myMonthWorkoutsArray:Array;
			private var workoutsByDayArray:Array;
			private var workoutDayUIelementsArray:Array; //Array of woListDay objects on screen
			public var myMonth:Date;
			private var days:Array = ['SUN','MON','TUE','WED','THU','FRI','SAT'];
			private var months:Array = ['JAN','FEB','MAR','APR','MAY','JUN','JUL','AUG','SEP','OCT','NOV','DEC'];
			
			private var utils:business.utils = new business.utils();
			
			public function buildWorkoutList():void{
				this.removeAllElements();
				buildWorkoutsByDay();
				addWorkoutDaysToScreen();
			}
			
			private function addWorkoutDaysToScreen():void{
				/*for each(var woDay:Object in workoutsByDayArray){
					var wold:woListDay = new woListDay();
					wold.myDate = woDay.date;
					wold.day = days[woDay.date.day];
					wold.date = woDay.date.date;
					wold.month = months[woDay.date.month];
					wold.myWorkouts = woDay.workouts;
					wold.buildWorkouts();
					this.addElement(wold);
				}*/
			}
			
			private function buildWorkoutsByDay():void{
				workoutsByDayArray = [];
				
				if(myMonthWorkoutsArray.length>0){
					//myMonthWOs should be sorted by date. //doesnt matter - can sort later
					//add the first
					var fistDayWOs:Object = new Object();
					fistDayWOs.date = myMonthWorkoutsArray[0]._date;
					fistDayWOs.sortDate = utils.getSortNumberFromDate(myMonthWorkoutsArray[0]._date);
					fistDayWOs.workouts = [myMonthWorkoutsArray[0]];
					
					workoutsByDayArray.push(fistDayWOs);
					
					//add the rest
					var currentDayIndex:int = 0;
					for(var i:int = 1; i<myMonthWorkoutsArray.length; i++){
						if(myMonthWorkoutsArray[i]._date.toString() == workoutsByDayArray[currentDayIndex].date.toString()){
							//same day
							workoutsByDayArray[currentDayIndex].workouts.push(myMonthWorkoutsArray[i])
						}else{
							//different day
							var dayWOs:Object = new Object();
							dayWOs.date = myMonthWorkoutsArray[i]._date;
							dayWOs.sortDate = utils.getSortNumberFromDate(myMonthWorkoutsArray[i]._date);
							dayWOs.workouts = [myMonthWorkoutsArray[i]];
							workoutsByDayArray.push(dayWOs);
							currentDayIndex++;
						}
					}
				}
				
				workoutsByDayArray.sortOn('sortDate', Array.NUMERIC);
				
			}
			
			public function workoutAdded(event:UIEvent):void{
				//compare workout date with this month
				if(utils.getMonthSortNumberFromDate(event.workout._date) == utils.getMonthSortNumberFromDate(myMonth)){
					//if its in this month
					//check for a day that matches
					var dayExists:Boolean = false;
					for each(var woDay:Object in workoutsByDayArray){
						//if there is a day, ignore (the day will add the workout itself)
						if(utils.getSortNumberFromDate(woDay.date) == utils.getSortNumberFromDate(event.workout._date)){
							dayExists = true;
							break;
						}
					}
					//add workout to this months workouts
					myMonthWorkoutsArray.push(event.workout);
					//rebuild workoutsByDay
					buildWorkoutsByDay();
					if(!dayExists){
						//if day is not already on screen rebuild the list from scratch
						this.removeAllElements();
						addWorkoutDaysToScreen();
					}
				}
				
			}
			
			
			public function workoutUpdated(event:UIEvent):void{
				//Delete the updated workout if it is here
				for(var i:int = 0; i<myMonthWorkoutsArray.length; i++){
					var wo:Workout = myMonthWorkoutsArray[i];
					if(wo == event.workout){
						
						//find UIElemet
						for each(var wold:woListDay in workoutDayUIelementsArray){
							//if(wold.date
						}
						
						
						
						
						myMonthWorkoutsArray.splice(i, 1);
					}
				}
				
				//add the workout if necessary
				workoutAdded(event);
				
			}
			
			
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	
</s:VGroup>
