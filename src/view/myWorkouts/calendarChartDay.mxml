<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 
		 minWidth="0"
		 width="100%"
		 >
	
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			
			import spark.components.Group;
			
			import business.utils;
			import business.dataObjects.raw.Workout;
			
			import events.UIEvent;
			
			public var myDayWOs:Array; //Array of Workout objects
			public var woBlocks:Array; //Array of calendarWorkoutBlock objects
			public var myDate:Date;
			[Bindable] public var colWidth:Number;
			[Bindable] public var dayString:String = 'T';
			[Bindable] public var dateString:String = '15';
			
			
			private var utils:business.utils = new business.utils();
			
			
			public function setWeekend():void{
				dateLabel.styleName = "calDayWELabel";
				dayLabel.styleName = "calDayWELabel";
			}
			
			public function buildWorkouts(event:Event):void{
				woBlocks = [];
				//sort workouts by activity name
				myDayWOs.sortOn("firstActivityName");
				for each(var w:Workout in myDayWOs){
					woBlocks.push(addBlockToColumn(w));
				}
			}
			
			private function addBlockToColumn(workout:Workout):UIComponent{
				var block:calendarWorkoutBlock = new calendarWorkoutBlock();
				block.workout = workout;
				columnDisplay.addElement(block);
				return block;
				
			}
			
			public function resizeMe():void
			{
				for each(var block:calendarWorkoutBlock in woBlocks){
					block.blockRect.width = (colWidth-4);
				}
			}
			
			public function workoutAdded(event:UIEvent):void{
				if( utils.compareDates(event.workout._date, myDate) ){
					myDayWOs.push(event.workout);
					columnDisplay.removeAllElements();
					buildWorkouts(null);
				}
				resizeMe();
			}
			
			
			public function workoutDeleted(event:UIEvent):void{
				if( utils.compareDates(event.workout._date, myDate) ){
					for(var w:int = 0; w < myDayWOs.length; w++){
						var wo:Workout = myDayWOs[w];
						if(wo == event.workout){
							//remove from array
							myDayWOs.splice(w, 1);
							break;
						}
					}
					
					columnDisplay.removeAllElements();
					buildWorkouts(null);
				}
				resizeMe();
			}
			
			
			public function workoutDateChanged(event:UIEvent):void{
				//is the changed workout in this day
				for(var w:int = 0; w < myDayWOs.length; w++){
					var wo:Workout = myDayWOs[w];
					if(wo == event.workout){
						//remove from array
						myDayWOs.splice(w, 1);
						
						//find and remove block from screen
						var updatedBlock:calendarWorkoutBlock;
						var blockIndex:int;
						for(var i:int = 0; i< woBlocks.length; i++){
							var block:calendarWorkoutBlock = woBlocks[i];
							if(block.workout == event.workout){
								columnDisplay.removeElement(block);
								break;
							}
						}
						break;
					}
				}
				
				//add to this day if needed
				workoutAdded(event);
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<s:VGroup gap="0" minWidth="0">
		<s:VGroup id="columnDisplay" height="160" minWidth="0" gap="1" verticalAlign="bottom">
			<!--<s:Graphic bottom="0" minWidth="0">
				<s:Rect height="25" width="{colWidth-6}" minWidth="0">
					<s:fill>
						<s:SolidColor color="#bada55"/>
					</s:fill>
				</s:Rect>
			</s:Graphic>-->
		</s:VGroup>
		<s:Label id="dateLabel" text="{dateString}" width="100%" textAlign="center" styleName="calDayLabel" height="15" paddingTop="5" minWidth="0" alpha=".7"/>
		<s:Label id="dayLabel" text="{dayString}" width="100%" textAlign="center" styleName="calDayLabel" height="14" minWidth="0" alpha=".7"/>
	</s:VGroup>
	
	
</s:Group>
