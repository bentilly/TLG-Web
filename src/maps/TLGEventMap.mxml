<?xml version="1.0" encoding="utf-8"?>
<EventMap xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns="http://mate.asfusion.com/"
		  
		  >
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import business.ResponseManager;
			import business.Services;
			
			import events.RequestEvent;
			import events.UIEvent;
			
			import view.tlgContent;
			import view.addBar.activityGroup;
			import view.addBar.addBar;
			import view.addBar.addWorkout;
			import view.addBar.workoutActivities;
			import view.addBar.workoutDetails;
			import view.addBar.workoutTimeEntry;
			import view.dashboard.myGroups_dash;
			import view.dashboard.myTraining_dash;
			import view.login.loginUI;
			import view.myGroups.myGroupContent;
			import view.myWorkouts.calendarChartDay;
			import view.myWorkouts.myWorkoutsContent;
			import view.popups.editTagPopup;
			import view.popups.editWorkoutPopup;
			
			
			[Bindable] private var services:Services = new Services();
			
			
		]]>
	</fx:Script>
	
	
	<fx:Declarations>
		
		<!-- FlexEvent.PREINITIALIZE __________________________________________________________________ -->
		<!--Initializes event dispatchers in Managers so they can send events-->
		<EventHandlers type="{FlexEvent.PREINITIALIZE}">
			<ObjectBuilder generator="{ResponseManager}" constructorArguments="{scope.dispatcher}" />
		</EventHandlers>
		
		<!--Main API request-->
		<EventHandlers type="{RequestEvent.TLG_API_REQUEST}" debug="true">
			<HTTPServiceInvoker instance="{services.tlgApiRequest}" debug="true">
				<Request data="{event.requestJson}"/>
				<resultHandlers>
					<MethodInvoker generator="{ResponseManager}" method="handleResponse" arguments="{[event, resultObject]}"/>
				</resultHandlers>
				<faultHandlers>
					<MethodInvoker generator="{ResponseManager}" method="handleFault" arguments="{[event, fault, resultObject]}"/>
				</faultHandlers>
			</HTTPServiceInvoker>
		</EventHandlers>
		
		<EventHandlers type="{UIEvent.LOGOUT}">
			<MethodInvoker generator="{ResponseManager}" method="logout"/>
		</EventHandlers>
		
		<EventHandlers type="{UIEvent.GO_GROUP}">
			<MethodInvoker generator="{ResponseManager}" method="goGroup" arguments="{event}"/>
		</EventHandlers>
		
		
		<Injectors target="{tlgContent}">
			<!--Events-->
			<ListenerInjector eventType="{UIEvent.USER_LOGGED_IN}" method="userLoggedIn"/>
			<ListenerInjector eventType="{UIEvent.GOT_GROUPS}" method="gotGroups"/>
			<ListenerInjector eventType="{UIEvent.GO_HOME}" method="goHome"/>
			<ListenerInjector eventType="{UIEvent.GO_GROUP}" method="goGroup"/>
			<ListenerInjector eventType="{UIEvent.GOT_ALL_WORKOUTS}" method="gotAllWorkouts"/>
			<ListenerInjector eventType="{UIEvent.LOGOUT}" method="logout"/>
			<!--Properties-->
			<PropertyInjector source="{ResponseManager}" sourceKey="token" targetKey="token"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="myGroups_collection" targetKey="myGroups_collection"/>
		</Injectors>
		
		<Injectors target="{addBar}">
			<ListenerInjector eventType="{UIEvent.GO_MYWORKOUTS}" method="goMyWorkouts"/>
			<ListenerInjector eventType="{UIEvent.GO_GROUP}" method="goGroup"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="userName" targetKey="userName"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="userEmail" targetKey="userEmail"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="currentGroup" targetKey="currentGroup"/>
		</Injectors>
		
		<Injectors target="{myTraining_dash}">
			<PropertyInjector source="{ResponseManager}" sourceKey="userName" targetKey="userName"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="userEmail" targetKey="userEmail"/>
		</Injectors>
		
		<Injectors target="{myGroups_dash}">
			<PropertyInjector source="{ResponseManager}" sourceKey="myGroups_collection" targetKey="myGroups_collection"/>
		</Injectors>
		
		<Injectors target="{workoutActivities}">
			<!--Events-->
			<ListenerInjector eventType="{UIEvent.GOT_MY_ACTIVITES}" method="buildMyActivities"/>
			<ListenerInjector eventType="{UIEvent.ACTIVITIES_UPDATED}" method="updateMyActivities"/>
			<!--Properties-->
			<PropertyInjector source="{ResponseManager}" sourceKey="myActivities_collection" targetKey="myActivities_collection"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="myGroups_collection" targetKey="myGroups_collection"/>
		</Injectors>
		
		<Injectors target="{addWorkout}">
			<PropertyInjector source="{ResponseManager}" sourceKey="token" targetKey="token"/>
		</Injectors>
		
		<Injectors target="{editTagPopup}">
			<PropertyInjector source="{ResponseManager}" sourceKey="token" targetKey="token"/>
		</Injectors>
		
		<Injectors target="{workoutTimeEntry}">
			<ListenerInjector eventType="{UIEvent.WORKOUT_ADDED}" method="workoutAdded"/>
		</Injectors>
		
		<Injectors target="{workoutDetails}">
			<ListenerInjector eventType="{UIEvent.WORKOUT_ADDED}" method="workoutAdded"/>
		</Injectors>
		
		<Injectors target="{activityGroup}">
			<ListenerInjector eventType="{UIEvent.WORKOUT_ADDED}" method="workoutAdded"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="userEmail" targetKey="userEmail"/>
		</Injectors>
		
		<Injectors target="{calendarChartDay}">
			<ListenerInjector eventType="{UIEvent.WORKOUT_ADDED}" method="workoutAdded"/>
			<ListenerInjector eventType="{UIEvent.WORKOUT_DATE_CHANGED}" method="workoutDateChanged"/>
			<ListenerInjector eventType="{UIEvent.GOT_ALL_WORKOUTS}" method="buildWorkouts"/>
		</Injectors>
		
		<Injectors target="{editWorkoutPopup}">
			<PropertyInjector source="{ResponseManager}" sourceKey="token" targetKey="token"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="myActivities_collection" targetKey="myActivities_collection"/>

		</Injectors>
		
		<Injectors target="{myWorkoutsContent}">
			<PropertyInjector source="{ResponseManager}" sourceKey="token" targetKey="token"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="workoutDaysByMonth_collection" targetKey="workoutDaysByMonth_collection"/>
			<ListenerInjector eventType="{UIEvent.BUILD_MYWORKOUTS}" method="buildMyWorkouts"/>
			<ListenerInjector eventType="{UIEvent.WORKOUT_ADDED}" method="workoutAdded"/>
			<ListenerInjector eventType="{UIEvent.LOGOUT}" method="logout"/>
		</Injectors>
		
		<Injectors target="{myGroupContent}">
			<PropertyInjector source="{ResponseManager}" sourceKey="token" targetKey="token"/>
			<PropertyInjector source="{ResponseManager}" sourceKey="currentGroup" targetKey="currentGroup"/>
		</Injectors>
		
		<Injectors target="{loginUI}">
			<ListenerInjector eventType="{UIEvent.USER_LOGGED_IN}" method="userLoggedIn"/>
			<ListenerInjector eventType="{UIEvent.LOGIN_FAIL}" method="loginFail"/>
		</Injectors>
		
		
		
		
	</fx:Declarations>
	
	
</EventMap>
